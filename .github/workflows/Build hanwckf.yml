#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-iwrt
# Description: Build iwrt using GitHub Actions


name: Build hanwckf

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: hanwckf/.config
  DIY_P1_SH: hanwckf/diy-part1.sh
  DIY_P2_SH: hanwckf/diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(cat ${GITHUB_WORKSPACE}/depends-ubuntu)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt


    - name: Update feeds
      run: |
         cd openwrt
         ./scripts/feeds update -a 
         git clone https://github.com/openwrt/packages packages_temp
         cp -r packages_temp/libs/libpam feeds/packages/libs/
         cp -r packages_temp/net/wsdd2 feeds/packages/net/
         rm -rf packages_temp

 
    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH   

    - name: Install feeds
      run: |
        cd openwrt && ./scripts/feeds install -a
        

    
         
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH


    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd ${GITHUB_WORKSPACE}/iwrt
        cp -f ${GITHUB_WORKSPACE}/$CONFIG_FILE ${GITHUB_WORKSPACE}/iwrt/.config
        make defconfig
        make download -j8

    - name: Compile the firmware
      id: compile
      run: |
        cd ${GITHUB_WORKSPACE}/iwrt
        make -j$(nproc) || make -j1 V=s
        echo "status=success" >> "$GITHUB_OUTPUT"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M%S")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Zip bin directory
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd ${GITHUB_WORKSPACE}/iwrt/bin
        zip -r ${GITHUB_WORKSPACE}/iwrt/iwrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}.zip *

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd ${GITHUB_WORKSPACE}/iwrt/bin/targets/*/*
        rm -rf packages
        mv ${GITHUB_WORKSPACE}/iwrt/iwrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}.zip ./
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> "$GITHUB_OUTPUT"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: iwrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        ls ${{ env.FIRMWARE }}
        echo "release_tag=$(date +"%Y.%m.%d-%H%M%S")" >> "$GITHUB_OUTPUT"
        echo "status=success" >> "$GITHUB_OUTPUT"

    - name: Generate release info
      id: info
      if: steps.tag.outputs.status == 'success' && !cancelled()
      run: |
        echo "## :mega:Update content" > release.txt
        echo "![](https://img.shields.io/github/downloads/${{ github.repository }}/${{ steps.tag.outputs.release_tag }}/total?style=flat-square)" >> release.txt
        echo "### Info" >> release.txt
        echo "**:minidisc: Build Time: ${{ steps.tag.outputs.release_tag }}**" >> release.txt
        touch release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: ncipollo/release-action@main
      if: steps.info.outputs.status == 'success' && !cancelled()
      with:
        tag: ${{ steps.tag.outputs.release_tag }}
        bodyFile: release.txt
        artifacts: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 1

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 12
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
